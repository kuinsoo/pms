<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.or.ddit.message.mapper.MessageMapper">
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<!-- 받은 쪽지 리스트 + 페이징처리 -->
	<select id="messageReceived"  resultType= "msgVo" parameterType="pageVo">
		select * from(
		    select rownum rnum ,a.*
		             from
		                  (select A.MSG_ID,
		                  		  A.MSG_SMEMBER, 
	                              A.MSG_CONTENT, 
	                              A.MSG_TIME,
	                              A.MSG_TYPE
	                        from  MESSAGE A, MESSAGE_MEMBER B
	                        where A.MSG_ID = B.MSGMEMBER_MSG
	                         and  B.MSG_RMEMBER= #{member_mail}
	                        ORDER BY  decode(A.MSG_TYPE,'Y',0,'N',1,2) asc, A.MSG_TIME desc)a)
	 		 where rnum between ${page}*${pageSize}-(${pageSize}-1) AND ${page}*${pageSize}
	</select>
	
	<!--  받은쪽지 갯수  -->
	<select id="totalMsgReceived" resultType="int" parameterType="String">
		select count (*)
		from MESSAGE_MEMBER
		where MSG_RMEMBER = #{member_mail}
	</select>
	
	<!-- 받은쪽지 -->
	<select id = "selectMessageReceived" resultType="msgVo" parameterType="String">
		select A.MSG_SMEMBER, 
      		   A.MSG_CONTENT, 
      		   A.MSG_TIME
		from  MESSAGE A, MESSAGE_MEMBER B
		where A.MSG_ID = B.MSGMEMBER_MSG
 		and  B.MSG_RMEMBER= #{member_mail}
 		and  A.MSG_ID = #{msg_id}
	</select>
	
	<!-- 받은 쪽지  읽음/안읽음 처리하기  -->
	<update id="updateMessageReceived" parameterType="msgVo">
		update message
		set msg_type = 'N'
		where msg_id = #{msg_id}
	</update>
	
	<!-- 받은쪽지  -->
	<select id = "selectOneMessageReceived" parameterType="String" resultType="msgVo">    
		select * from message
		where msg_id = #{msg_id}
	</select>
	
	
	<select id = "selectOneMessageSend" parameterType="msgVo" resultType="msgVo">    
		
		select * from(
			select rownum rnum ,a.*
		         from
		              (select * from message A inner join message_member B
						on A.msg_id = B.msgmember_msg
						where  A.msg_smember = #{msg_smember}
						and    A.msg_id = #{msg_id})a)
	</select>
	
	<!-- 쪽지 보내기  -->
	<insert id="insertMessageSend" parameterType="msgVo">
		insert all
		<selectKey keyProperty="msg_id" resultType="String" order="BEFORE">
		     Select msg_id_SEQ.NEXTVAL From Dual
		  </selectKey>
			 into message values(#{msg_id},#{msg_smember},sysdate,'Y',#{msg_content})
			 into message_member values(#{msg_id},#{msg_rmember},sysdate)
		 	 select * from dual
	</insert>
	
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<!-- 보낸쪽지 리스트 + 페이징 처리 -->
		
	<select id="messageSend"  resultType= "msgVo" parameterType="pageVo">
		select * from(
		    select rownum rnum ,a.*
		             from
		                  (select B.MSGMEMBER_MSG,
		                  		  B.MSG_RMEMBER, 
                                  A.MSG_CONTENT, 
                                  B.MSG_RDATE
                            from  MESSAGE A, MESSAGE_MEMBER B
                            where A.MSG_ID = B.MSGMEMBER_MSG
                            and A.MSG_SMEMBER = #{member_mail}
                              ORDER BY B.MSG_RDATE desc)a)
            where rnum between ${page}*${pageSize}-(${pageSize}-1) AND ${page}*${pageSize}
	</select>
	
	<!--  보낸쪽지 갯수  -->
	<select id="totalMsgSend" resultType="int" parameterType="String">
		select count(*) from message A, message_member B
        where MSG_SMEMBER = #{member_mail}
        and A.MSG_ID = B.MSGMEMBER_MSG
	</select>
	<!-- 받은메시지 삭제 -->
	<delete id="deleteMsgReceived" parameterType="String">
		delete from message_member where msgmember_msg = #{msg_id}
	</delete>

	<!-- 보낸 메시지 삭제 -->
	<delete id="deleteMsgSend" parameterType="String">
		delete from message_member where msgmember_msg = #{msg_id}
	</delete>
	
	<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ -->
	<!-- 내 친구 리스트  -->
	<select id="MyFriendsList"  resultType= "friendVo" parameterType="pageVo">
	   SELECT c.rnum, c.*
			FROM (
			 select rownum rnum, b.* from(
			     select a.*
			         from
			             (select friend_member,
                                friend_code,
                                member_name
                         from   FRIENDSLIST inner join member
                         on     friend_member = member_mail
                         where  friend_myemail = #{member_mail}
                         and    friend_accept = 'Y'
                         ORDER BY friend_member  desc )a ) b
           <if test="searchTextFriend!=null and searchTextFriend!=''">where friend_member like '%'||#{searchTextFriend}||'%'</if> ) c
      where rnum between ${page}*${pageSize}-(${pageSize}-1) AND ${page}*${pageSize}
	
	</select> 

	<!-- 친구목록 부분 -->
	<select id="totalFriends" resultType="int" parameterType="String">
		select count(*)
		from   FRIENDSLIST 
		where  friend_myemail = #{member_mail}
		and    friend_accept = 'Y'
	</select>

	<select id="totalFriendsSearch" resultType="int" parameterType="pageVo">
		select count(*)
		from   FRIENDSLIST 
		where  friend_myemail = #{member_mail}
		and    friend_accept = 'Y'
		and    friend_member like '%'||#{searchTextFriend}||'%'
	</select>
	
	


	<!-- 나의 친구리스트에서 친구 삭제하기  -->
	<delete id="deleteMyfriend" parameterType="String">
		delete from FRIENDSLIST 
		where friend_code=  #{friend_code}
	</delete>
	
	<!-- 전체사용자 리스트 단, 내 친구는 안나와야함.+ 페이징 처리  -->
	<select id ="totalMemberSearch" resultType="memberVo" parameterType="pageVo">
		
		SELECT c.rnum, c.*
			FROM (
			 select rownum rnum, b.* from(
			     select a.*
			         from
			             (
                          SELECT  
                                 member_mail,
			                      member_name,
                                  'S' as friend_accept
			              FROM    member INNER JOIN AUTHORITY ON MEMBER_MAIL = AUTH_MEMBER
			              WHERE   member_mail NOT IN (SELECT  friend_member
			                                        FROM    FRIENDSLIST
			                                        WHERE   friend_myemail = #{member_mail}
			                                        AND     friend_accept IN ('N','Y'))
			              AND     member_withdrawal = 'N'
                          AND     AUTH_ASSORT = '2'
			              AND     member_mail NOT IN  #{member_mail}
			              ORDER BY member_mail desc)a) b
	    <if test="searchTextFriendList!=null and searchTextFriendList!=''">where member_mail like '%'||#{searchTextFriendList}||'%'</if> ) c
	   	WHERE  rnum between ${page}*${pageSize}-(${pageSize}-1) AND ${page}*${pageSize}
	
	</select>
	
	<!-- 전체 사용자 total -->
	<select id="totalMember" resultType="int" parameterType="String">
		SELECT  count(*)
		FROM    member INNER JOIN AUTHORITY ON MEMBER_MAIL = AUTH_MEMBER
		WHERE   member_mail NOT IN (SELECT  friend_member
		                        FROM    FRIENDSLIST
		                        WHERE   friend_myemail = #{member_mail}
		                        AND     friend_accept IN ('N','Y'))
		AND     member_withdrawal = 'N'
		AND     AUTH_ASSORT = '2'
		AND     member_mail NOT IN #{member_mail}
		ORDER BY member_mail desc
	</select>
	
	<!-- 전체 사용자 total 검색 부분 -->
	<select id="totalMemberListSearch" resultType="int" parameterType="pageVo">
		SELECT  count(*)
		FROM    member INNER JOIN AUTHORITY ON MEMBER_MAIL = AUTH_MEMBER
		WHERE   member_mail NOT IN (SELECT  friend_member
		                            FROM    FRIENDSLIST
		                            WHERE   friend_myemail = #{member_mail}
		                            AND     friend_accept IN ('N','Y'))
		AND     member_withdrawal = 'N'
		AND     AUTH_ASSORT = '2'
		AND     member_mail NOT IN #{member_mail}
		AND     member_mail like '%'||#{searchTextFriendList}||'%'
	</select>
	
	<select id ="memberListN" resultType="friendVo">
		  SELECT  member_mail,
		          member_name
		  FROM    member
		  WHERE   member_mail NOT IN (SELECT  friend_member
		                            FROM    FRIENDSLIST
		                            WHERE   friend_myemail = #{member_mail}
		                            AND     friend_accept = 'N')
		  AND     member_withdrawal = 'N'
		  AND     member_mail NOT IN #{member_mail}
		  ORDER BY member_mail
	</select>
	
	<!-- 내가 보낸친구요청 리스트  -->
	<select  id ="mySendFriendList" resultType="friendVo" parameterType="pageVo">
		 SELECT c.rnum, c.*
			FROM (
			 select rownum rnum, b.* from(
			     select a.*
			         from
			             (SELECT  friend_code,  
                	 		      friend_member, 
                                  member_name
                          FROM    FRIENDSLIST inner join member
                          ON      friend_member = member_mail
                          WHERE   friend_myemail = #{member_mail}
                          AND     friend_accept = 'N'
                          ORDER BY friend_member  desc )a) b 
        <if test="searchTextMySendFriendList!=null and searchTextMySendFriendList!=''"> where friend_member like '%'||#{searchTextMySendFriendList}||'%'</if> )c
         WHERE  rnum between ${page}*${pageSize}-(${pageSize}-1) AND ${page}*${pageSize}
		     
	</select>
	<!-- 내가 보낸 친구 요청 전체 total값 -->
	<select id="totalmySendFriendList" resultType="int" parameterType="String">
		SELECT  count(*) 
		FROM    FRIENDSLIST 
	    WHERE   friend_myemail = #{member_mail}
	    AND     friend_accept = 'N'
	</select>
	
	<!-- 내가 보낸 친구 요청 검색 total값 -->
	<select id="totalmySendFriendListSearch" resultType="int" parameterType="pageVo">
		SELECT  count(*) 
		FROM    FRIENDSLIST 
	    WHERE   friend_myemail = #{member_mail}
	    AND     friend_accept = 'N'
	    AND     friend_member like '%'||#{searchTextMySendFriendList}||'%'
	</select>
	
	
	
	<delete  id="deletemySendFriendList" parameterType="String">
		delete from FRIENDSLIST where friend_code = #{friend_code}
	</delete>
	
	<!-- 내가 받은 요청  -->
	<select id ="youGiveFriendList" resultType="friendVo" parameterType="pageVo">
		 SELECT c.rnum, c.*
					FROM (
					 select rownum rnum, b.* from(
					     select a.*
					         from
					             (select friend_myemail
		                                  , friend_code
		                                  , (select member_name from member where member_mail = friend_myemail) as member_name
		                            from   FRIENDSLIST
		                            where  friend_member  = #{member_mail}
		                            and    friend_accept  = 'N'
		                            ORDER BY friend_myemail  desc )a) b 
		 <if test="searchTextYouGiveFriendList!=null and searchTextYouGiveFriendList!=''"> where friend_myemail like '%'||#{searchTextYouGiveFriendList}||'%'</if> )c
		 where rnum between ${page}*${pageSize}-(${pageSize}-1) AND ${page}*${pageSize}
	</select>
	
	<!-- 내가 받은 친구요청 전체 total값 -->
	<select id="totalyouGiveFriendList" resultType="int" parameterType="String">
		select count(*) 
		from   FRIENDSLIST
		where  friend_member  = #{member_mail}
		and    friend_accept  = 'N'
	</select>
	
	<!-- 내가 받은 친구요청 검색 전체 total값 -->
	<select id="totalyouGiveFriendListSearch" resultType="int" parameterType="pageVo">
		select count(*) 
		from   FRIENDSLIST
		where  friend_member  = #{member_mail}
		and    friend_accept  = 'N'
		and    friend_myemail like '%'||#{searchTextYouGiveFriendList}||'%'
	</select>
	
	
	<!-- 친구 추가 - 친구한테 친구 요청을 보내는 거라고 할수있음  -->
	<insert id="insertFriendN" parameterType="friendVo">
		insert into FRIENDSLIST values(FRIEND_CODE_SEQ.nextval, #{friend_myemail} ,#{friend_member},'N',sysdate)
	</insert>
	
	<!-- 내가 받은요청에서 수락 버튼을 클릭했을때 1.  -->
	<update id="updateAcceptFriend" parameterType="String">
		update  FRIENDSLIST
		set friend_accept = 'Y'
		where friend_code = #{friend_code}
	</update>

	<!-- <update id="updateSfriendN" parameterType="String">
		update  FRIENDSLIST
		set friend_accept = 'N'
		where friend_code = #{friend_code}
	</update> -->
	
	<!-- 내가 받은 요청에서 수락버튼을 누르면 상대방은 insert -->
    <insert  id="insertFriendY" parameterType="friendVo"> 
		insert into FRIENDSLIST values(FRIEND_CODE_SEQ.NEXTVAL, #{friend_myemail},#{friend_member},'Y',sysdate)
	</insert> 

	<!-- 내가 받은요청에서 거절 버튼을 클릭했을때  -->
	<update id="updateRefuseFriend" parameterType="String">
		update  FRIENDSLIST
		set friend_accept = 'S'
		where friend_code = #{friend_code}
	</update>
	
	<select id="totalmessageSizeCheck" resultType="int" parameterType="String">
		select count(*)
		from  MESSAGE A, MESSAGE_MEMBER B
		where A.MSG_ID = B.MSGMEMBER_MSG
		 and  B.MSG_RMEMBER= #{member_mail}
		 and  A.msg_type = 'Y'
	</select>

	<select  id="totalFriendSizeCheck" resultType="int" parameterType="String">
		select count(*)
		from   FRIENDSLIST
		where  friend_member  = #{member_mail}
		and    friend_accept  = 'N'
	
	</select>
</mapper>